"""
Django settings for djangoProject project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import hashlib
import pathlib
from pathlib import Path

# Для работы с переменными которые хранятся в файле .env
from decouple import config
from loguru import logger

# Build paths inside the project like this: BASE_DIR / 'subdir'.


BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

if not config("DEBUG", default=False, cast=bool):
    # Устанавливаем SESSION_ENGINE на использование подписанных кук
    SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = ["192.168.10.12", "corp.barkol.ru", "localhost", "127.0.0.1"]

USE_X_FORWARDED_FOR = True

CSRF_TRUSTED_ORIGINS = ["https://corp.barkol.ru", "http://192.168.10.12"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "daphne",
    "django.contrib.staticfiles",
    "library_app.apps.LibraryAppConfig",
    "administration_app.apps.AdministrationAppConfig",
    "customers_app.apps.CustomersAppConfig",
    "contracts_app.apps.ContractsAppConfig",
    "hrdepartment_app.apps.HrdepartmentAppConfig",
    "logistics_app.apps.LogisticsAppConfig",
    "telegram_app.apps.TelegramAppConfig",
    "widget_tweaks",
    "django_ckeditor_5",
    "debug_toolbar",
    "channels",
    "dynamic_formsets",
    "chat_app.apps.ChatAppConfig",
]

MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # 'administration_app.middleware.RequestMiddleware',
    "xff.middleware.XForwardedForMiddleware",
]

XFF_TRUSTED_PROXY_DEPTH = 2

ROOT_URLCONF = "djangoProject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # Подключаем context processors из приложения administration_app
                "administration_app.context_processors.get_all_contracts",
                "administration_app.context_processors.get_approval_oficial_memo_process",
                "administration_app.context_processors.get_qrcode",
            ],
        },
    },
]

WSGI_APPLICATION = "djangoProject.wsgi.application"
ASGI_APPLICATION = "djangoProject.asgi.application"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

if DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": config("DATABASE_NAME"),
            "HOST": config("DATABASE_HOST"),
            "USER": config("DATABASE_USERNAME"),
            "PASSWORD": config("DATABASE_PASSWORD"),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        'OPTIONS': {
            'user_attributes': ('first_name', 'last_name', 'birthday'),
            'max_similarity': 0.6,
        }
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "ru-RU"

TIME_ZONE = "Europe/Moscow"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# STATIC_URL = 'static/'
# STATICFILES_DIRS = (
#     pathlib.Path.joinpath(BASE_DIR, 'static'),
# )

STATIC_URL = "/static/"
# STATIC_ROOT = pathlib.Path.joinpath(BASE_DIR, 'static')

STATICFILES_DIRS = [
    pathlib.Path.joinpath(BASE_DIR, "static_dev"),
    pathlib.Path.joinpath(BASE_DIR, 'static'),
]

MEDIA_URL = "/media/"
MEDIA_ROOT = pathlib.Path.joinpath(BASE_DIR, "media")

logger.add(
    "debug.json",
    format=config("LOG_FORMAT"),
    level=config("LOG_LEVEL"),
    rotation=config("LOG_ROTATION"),
    compression=config("LOG_COMPRESSION"),
    serialize=config("LOG_SERIALIZE"),
)

customColorPalette = [
    {"color": "hsl(4, 90%, 58%)", "label": "Red"},
    {"color": "hsl(340, 82%, 52%)", "label": "Pink"},
    {"color": "hsl(291, 64%, 42%)", "label": "Purple"},
    {"color": "hsl(262, 52%, 47%)", "label": "Deep Purple"},
    {"color": "hsl(231, 48%, 48%)", "label": "Indigo"},
    {"color": "hsl(207, 90%, 54%)", "label": "Blue"},
]

CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link',
                    'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', ],

    },
    'extends': {
        'blockToolbar': [
            'paragraph', 'heading1', 'heading2', 'heading3',
            '|',
            'bulletedList', 'numberedList',
            '|',
            'blockQuote',
        ],
        'toolbar': ['heading', '|', 'outdent', 'indent', '|', 'bold', 'italic', 'link', 'underline', 'strikethrough',
        'code','subscript', 'superscript', 'highlight', '|', 'codeBlock', 'sourceEditing', 'insertImage',
                    'bulletedList', 'numberedList', 'todoList', '|',  'blockQuote', 'imageUpload', '|',
                    'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'mediaEmbed', 'removeFormat',
                    'insertTable',],
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft',
                        'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:side',  '|'],
            'styles': [
                'full',
                'side',
                'alignLeft',
                'alignRight',
                'alignCenter',
            ]

        },
        'table': {
            'contentToolbar': [ 'tableColumn', 'tableRow', 'mergeTableCells',
            'tableProperties', 'tableCellProperties' ],
            'tableProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            },
            'tableCellProperties': {
                'borderColors': customColorPalette,
                'backgroundColors': customColorPalette
            }
        },
        'heading' : {
            'options': [
                { 'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph' },
                { 'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1' },
                { 'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2' },
                { 'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3' }
            ]
        }
    },
    'list': {
        'properties': {
            'styles': 'true',
            'startIndex': 'true',
            'reversed': 'true',
        }
    }
}

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# DATA_UPLOAD_MAX_MEMORY_SIZE = 5248

# STATIC_ROOT = pathlib.Path.joinpath(BASE_DIR, 'static')
# MEDIA_ROOT = pathlib.Path.joinpath(BASE_DIR, 'media')
# MEDIA_URL = pathlib.Path.joinpath(BASE_DIR, 'media')
AUTH_USER_MODEL = "customers_app.DataBaseUser"
LOGIN_URL = "/users/login/"

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_IMAP_HOST = config("EMAIL_IMAP_HOST")
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_IAS_USER = config("EMAIL_IAS_USER")
EMAIL_FLY_USER = config("EMAIL_FLY_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
EMAIL_IAS_PASSWORD = config("EMAIL_IAS_PASSWORD")
EMAIL_FLY_PASSWORD = config("EMAIL_FLY_PASSWORD")
EMAIL_USE_SSL = True
EMAIL_PORT = 465

REDIS_HOST = "127.0.0.1"
REDIS_PORT = "6379"
CELERY_BROKER_URL = "redis://" + REDIS_HOST + ":" + REDIS_PORT + "/0"
CELERY_BROKER_TRANSPORT_OPTION = {"visibility_timeout": 3600}
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True # Автоматическая попытка установить соединение с AMQP broker при запуске Celery, если он недоступен.
CELERY_RESULT_BACKEND = "redis://" + REDIS_HOST + ":" + REDIS_PORT + "/0"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
        },
    },
}

INTERNAL_IPS = [
    "127.0.0.1",
]

CKEDITOR_5_FILE_STORAGE = "administration_app.utils.CkeditorCustomStorage"
TELEGRAM_TOKEN = config("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = config("TELEGRAM_CHAT_ID")
API_TOKEN = TELEGRAM_TOKEN
WEBHOOK_PATH = API_TOKEN
WEBHOOK_URL = f"https://corp.barkol.ru/{WEBHOOK_PATH}"
WEBHOOK_SSL_CERTIFICATE = pathlib.Path.joinpath(
    BASE_DIR, config("CERTIFICATE_PEM_PATH")
)  # Путь к сертификату
WEBHOOK_SSL_PRIVATE = pathlib.Path.joinpath(
    BASE_DIR, config("KEY_PEM_PATH")
)  # Путь к приватному ключу

# Устанавливаем SESSION_COOKIE_SECURE в True, чтобы сессионные куки передавались только по HTTPS
SESSION_COOKIE_SECURE = config("SESSION_COOKIE_SECURE", default=False, cast=bool)

# Устанавливаем SESSION_COOKIE_HTTPONLY в True, чтобы куки были доступны только через HTTP
SESSION_COOKIE_HTTPONLY = config("SESSION_COOKIE_HTTPONLY", default=False, cast=bool)

# Устанавливаем CSRF_COOKIE_SECURE в True, чтобы CSRF-токены передавались только по HTTPS
CSRF_COOKIE_SECURE = config("CSRF_COOKIE_SECURE", default=False, cast=bool)

# Перенаправляем все запросы на HTTPS
SECURE_SSL_REDIRECT = config("SECURE_SSL_REDIRECT", default=False, cast=bool)

if not config("DEBUG", default=False, cast=bool):
    # Включаем HTTP Strict Transport Security (HSTS)
    SECURE_HSTS_SECONDS = config("SECURE_HSTS_SECONDS")
SECURE_HSTS_INCLUDE_SUBDOMAINS = config("SECURE_HSTS_INCLUDE_SUBDOMAINS", default=False, cast=bool)
SECURE_HSTS_PRELOAD = config("SECURE_HSTS_PRELOAD", default=False, cast=bool)
if not config("DEBUG", default=False, cast=bool):
    # Устанавливаем SESSION_COOKIE_DOMAIN
    SESSION_COOKIE_DOMAIN = config("SESSION_COOKIE_DOMAIN")